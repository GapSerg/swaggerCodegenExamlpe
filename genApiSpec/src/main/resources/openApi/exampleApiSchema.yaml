openapi: 3.0.0
info:
  title: API for example
  description: OpenAPI schema of simple application
  version: 1.0.0

tags:
  - name: categories
    description: work with category
  - name: categories by Id
    description: work with category by id
  - name: products
    description: work with products

paths:
  '/categories':
    get:
      summary: Get all categories
      tags:
        - categories
      description: Returns an array of categories
      operationId: getAllCategories
      responses:
        '200':
          description: Returns a json object with an array of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponseDto'
        '400':
          $ref: '#/components/responses/Error'
    post:
      summary: Create category
      tags:
        - categories
      description: To create the category, you need to send a json object
      operationId: createCategory
      requestBody:
        description: To create a category, you need to send category object in json format with fields filled in. If the operation is successful, Http status 200
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDto'
      responses:
        '200':
          description: Returns the HttpStatus 200 and id of the created category and means the successful creation of a new category
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 1
        '400':
          $ref: '#/components/responses/Error'
  '/categories/{categoryId}':
    get:
      summary: Get category by Id
      tags:
        - categories by Id
      description: Method for getting a category by id.
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          description: To receive a category, you need to send the category id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns category by id that means successful receipt of data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDto'
        '400':
          $ref: '#/components/responses/Error'
    put:
      summary: Update category by Id
      tags:
        - categories by Id
      description: To update the category, you need to send a json object. Returns the updated user's category
      operationId: updateCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          description: To update category, you need to send the category id as a url parameter
          schema:
            type: integer
            format: int64
      requestBody:
        description: To update a category, you need to send category object in json format with fields filled in (if the field was not updated, send the old data). If the operation is successful, Http status 200
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestDto'
      responses:
        '200':
          description: Returns updated category by id it means successful data update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseDto'
        '400':
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete category by Id
      tags:
        - categories by Id
      description: Method for deleting category by id. Returns HttpStatus 204 with no content
      operationId: deleteCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          description: To delete a category, you need to send the category id as a url parameter
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Returns http status "No content" which means successful deletion of the category
        '400':
          $ref: '#/components/responses/Error'
  '/products':
    get:
      summary: Get all products
      description: Returns an array of products
      tags:
        - products
      operationId: getAllProducts
      responses:
        '200':
          description: Returns a json object with an array of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponseDto'
        '400':
          $ref: '#/components/responses/Error'
    post:
      summary: Create products
      description: Returns an array of products
      tags:
        - products
      operationId: createProduct
      responses:
        '200':
          description: Returns a json object with an array of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponseDto'
        '400':
          $ref: '#/components/responses/Error'

components:
  responses:
    Error:
      description: generic error return body template
      content:
        application/json:
          schema:
            type: string
            example: User not authenticated
  schemas:
    CategoryRequestDto:
      description: Category of products
      type: object
      required:
        - name
        - color
      properties:
        name:
          type: string
          example: GGGGGGG
        color:
          type: string
          maxLength: 7
          pattern: "#[0-9]+"
          example: '#FF0000'
    CategoryResponseDto:
      description: Category of products
      type: object
      required:
        - id
        - name
        - color
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: Food
        color:
          type: string
          maxLength: 7
          example: '#FF0000'
    ProductResponseDto:
      description: products
      type: object
      required:
        - id
        - name
        - price
        - rate
        - category
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: Food
        price:
          type: integer
          example: 10
        rate:
          type: integer
          example: 10
        category:
          $ref: '#/components/schemas/CategoryResponseDto'
